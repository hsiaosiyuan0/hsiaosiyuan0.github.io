{"code":200,"data":{"post":{"filename":"build-from-source","rawMeta":{"title":"build-from-source"},"content":"## 前言\n\n从源码分析的第一步，就是准备好开发环境。官方有比较完整的 [如果贡献指引](https://reactjs.org/docs/how-to-contribute.html)，文本将参考其中的内容进行整理\n\n## 准备源码\n\n首先将 React 的 [源码](https://github.com/facebook/react) 克隆至本地\n\n然后切换到最近的 Release 分支 `17.0.1`\n\n然后在项目根目录下运行 `yarn` 完成依赖的安装\n\n## 构建方式\n\n如果直接在根目录下运行 `yarn build` 会构建所有 `packages/` 下面的包，这个时间一般都会很久。因为只是为了学习源码，我们可以通过下面的命令让编译快一些：\n\n```bash\nyarn build react/index,react/jsx,react-dom/index,scheduler --type=umd_dev --watch\n```\n\n上面的命令中，我们设定只输出 UMD 的产物。咋一看有违直觉，因为目前大部分项目中，都是输出 ES module 然后再经过打包工具（比如 webpack）处理\n\n如果我们这里选择输出成 ES module，那么我们还需要配置演示项目的打包环节，并且我们还需要按照这里的 [步骤](https://reactjs.org/docs/how-to-contribute.html#development-workflow) 链接本地模块 `yarn link`\n\n而使用 UMD 模块的方式，我们只需要准备一个简单的 HTML 页面，并在页面中使用本地构建的 UMD 模块就可以了\n\n## 创建演示项目\n\n我们直接在 React 源码更目录下创建文件 `demo/index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"../build/node_modules/react/umd/react.development.js\"></script>\n  <script\n    src=\"../build/node_modules/react-dom/umd/react-dom.development.js\"></script>\n  <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script>\n</head>\n<body>\n<div id=\"app\"></div>\n<script type=\"text/babel\">\n  const Hello = function (props) {\n    return <div onClick={() => {\n      alert(1)\n    }}>Hello workd</div>;\n  }\n\n  ReactDOM.render(<Hello/>, document.getElementById('app'));\n</script>\n</body>\n</html>\n```\n\n我们可以直接在 WebStorm 内置的 Web Server 打开该文件：\n\n![](https://p5.music.126.net/obj/wo3DlcOGw6DClTvDisK1/7748817416/7ce7/80e5/ac1f/7e580e6b95ee29c238f1a458af59753b.png)\n\n或者直接在 `demo` 目录下运行：\n\n```bash\nln -s ../build build # svrx 只能从在启动目录下查找资源\nnpx svrx .\n```\n\n## 测试\n\n为了测试我们已经把环境配置好，先修改 React 源码在增加一个日志输出：\n\n```js\n// packages/react-dom/src/client/ReactDOMLegacy.js\nexport function render(\n  element: React$Element<any>,\n  container: Container,\n  callback: ?Function\n) {\n  console.log(\"hello from source\");\n  // ...\n}\n```\n\n然后我们编译 React 源码：\n\n```bash\nyarn build react/index,react/jsx,react-dom/index,scheduler --type=umd_dev --watch\n```\n\n使用 [svrx](https://github.com/svrxjs/svrx) 在 `demo` 目录下运行一个 Web 服务：\n\n```bash\nln -s ../build build # svrx 只能从在启动目录下查找资源\nnpx svrx .\n```\n\n不出意外的话，我们会在浏览器的控制台中看到 `hello from source` 的输出\n","slug":"/react/build-from-source","toc":[{"name":"前言","depth":2,"anchor":"#前言","children":[]},{"name":"准备源码","depth":2,"anchor":"#准备源码","children":[]},{"name":"构建方式","depth":2,"anchor":"#构建方式","children":[]},{"name":"创建演示项目","depth":2,"anchor":"#创建演示项目","children":[]},{"name":"测试","depth":2,"anchor":"#测试","children":[]}],"keywords":[],"mtime":1615393171086},"catalog":[{"name":"v8","url":"/post/v8","children":[{"name":"debug-v8-in-vscode","url":"/post/v8/debug-v8-in-vscode.html","children":[]},{"name":"v8 常见数据类型","url":"/post/v8/common-data-types.html","children":[]}]},{"name":"deno","url":"/post/deno","children":[{"name":"deno native plugin 内部实现机制","url":"/post/deno/native-plugin.html","children":[]}]},{"name":"crypto","url":"/post/crypto","children":[{"name":"加密算法调研","url":"/post/crypto/brief-crypto.html","children":[]}]},{"name":"nodejs","url":"/post/nodejs","children":[{"name":"Cluster 模块分析","url":"/post/nodejs/Cluster 模块分析.html","children":[]},{"name":"build-from-source","url":"/post/nodejs/build-from-source.html","children":[]},{"name":"node-addon","url":"/post/nodejs/node-addon.html","children":[]},{"name":"common-snippet","url":"/post/nodejs/common-snippet.html","children":[]},{"name":"heap-snapshot","url":"/post/nodejs/heap-snapshot.html","children":[]}]},{"name":"websocket","url":"/post/websocket","children":[{"name":"WebSocket 协议 1~4 节","url":"/post/websocket/WebSocket 协议 1~4 节.html","children":[]},{"name":"WebSocket 协议 5~10 节","url":"/post/websocket/WebSocket 协议 5~10 节.html","children":[]}]},{"name":"assembly","url":"/post/assembly","children":[{"name":"汇编语言学习小结","url":"/post/assembly/汇编语言学习小结.html","children":[]}]},{"name":"typescript","url":"/post/typescript","children":[{"name":"Decorator in babel and tsc","url":"/post/typescript/decorator.html","children":[]}]},{"name":"rust","url":"/post/rust","children":[{"name":"Lifetime","url":"/post/rust/lifetime.html","children":[]}]},{"name":"oop","url":"/post/oop","children":[{"name":"midway 分析","url":"/post/oop/ioc.html","children":[]}]},{"name":"php","url":"/post/php","children":[{"name":"为什么 PHP 不适合长时间运行","url":"/post/php/为什么 PHP 不适合长时间运行.html","children":[]}]},{"name":"blockchain","url":"/post/blockchain","children":[{"name":"crypto-conditions 简述","url":"/post/blockchain/crypto-conditions 简述.html","children":[]},{"name":"实用拜占庭容错简介","url":"/post/blockchain/实用拜占庭容错简介.html","children":[]}]},{"name":"browser","url":"/post/browser","children":[{"name":"浏览器异步加载和同源策略","url":"/post/browser/浏览器异步加载和同源策略.html","children":[]}]},{"name":"cpp","url":"/post/cpp","children":[{"name":"The as-if rule","url":"/post/cpp/the-as-if-rule.html","children":[]}]},{"name":"work","url":"/post/work","children":[{"name":"Parsing in practice","url":"/post/work/parsing-in-practice.html","children":[]}]},{"name":"os","url":"/post/os","children":[{"name":"大小端序","url":"/post/os/大小端序.html","children":[]},{"name":"UTF-8 编码及检查其完整性","url":"/post/os/UTF-8 编码及检查其完整性.html","children":[]},{"name":"魔数 0x7c00","url":"/post/os/魔数0x7c00.html","children":[]},{"name":"字符集和字符编码","url":"/post/os/字符集和字符编码.html","children":[]}]},{"name":"javascript","url":"/post/javascript","children":[{"name":"Generator Function","url":"/post/javascript/generator function.html","children":[]},{"name":"解析 JSON 的成本","url":"/post/javascript/解析 JSON 的成本.html","children":[]},{"name":"Javascript 内部的字符编码","url":"/post/javascript/Javascript 内部的字符编码.html","children":[]},{"name":"闭包的作用","url":"/post/javascript/闭包的作用.html","children":[]},{"name":"闭包是什么","url":"/post/javascript/闭包是什么.html","children":[]}]},{"name":"static-analysis","url":"/post/static-analysis","children":[{"name":"使用 Rust 重写 ternjs","url":"/post/static-analysis/ternjs.html","children":[]}]},{"name":"react","url":"/post/react","children":[{"name":"build-from-source","url":"/post/react/build-from-source.html","children":[]},{"name":"bootstrap","url":"/post/react/bootstrap.html","children":[]}]}],"title":"The hard ways"}}