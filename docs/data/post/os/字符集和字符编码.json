{"code":200,"data":{"post":{"filename":"字符集和字符编码","rawMeta":{"title":"字符集和字符编码"},"content":"之前已经了解过一些 Unicode 和 UTF-8 之前的关系，见 [UTF-8 编码及检查其完整性.md](UTF-8%20%E7%BC%96%E7%A0%81%E5%8F%8A%E6%A3%80%E6%9F%A5%E5%85%B6%E5%AE%8C%E6%95%B4%E6%80%A7.md)。\n\n今天在看 [ICU](http://site.icu-project.org/) 文档的时候，又再一次看到 `codepage` 这个参数，比如 [u_fopen](http://icu-project.org/apiref/icu4c/ustdio_8h.html#a921519fbcb17c3e3c020b2871afb8b23)，于是想了解一下 code page 和 character set、character encoding 之间的关系。\n\n代码页「Code Page」，也被称为 字符编码「Character Encoding」。维基百科上还解释称代码页也被称为内码，[见](https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E9%A1%B5)，初一看确认让人感觉云里雾里的，不排除中文翻译的问题。内码表示的是操作系统或者应用程序内部使用的编码，简称为「内码」。相信有人会和我一样，最初会以为代码页只的是很多编码格式的集合，单其实不是，一个代码页对应一个字符编码格式。\n\n字符集「Character Set」，这里的集合「Set」表示的是字符与指代它们的数字之间的对应关系的集合，比如：\n\n```js\na_character_set = {\n  'a': 1,\n  'b': 2\n}\n```\n\n那么字符集与字符编码有什么不同吗？区别就在于，编码引入了转换处理的过程。我们拿 Unicode 和 UTF-8 来举例。Unicode 就是字符集，我们通常可以使用 UInt32 来表示一个字符对应的 Unicode 中的数字，就好比上面的例子。而 UTF-8 被称为字符编码的原因，就是因为它包含了将原本需要 UInt32 即 4 个字节表示的字符，处理成需要 1~4 个不等的字符来表示的形式，这其中的转换就是编码的工作含义。我们甚至可以将 Character Set 理解为最简单的 Character Encoding。\n\n如果我们打开浏览器控制台检查「Inspect」一个请求的话，会发现在 Response Headers 中有：\n\n```\nContent-Type: text/html; charset=UTF-8\n```\n\n我们发现 UTF-8 是作为 `charset` 的值，为什么这里不是 `char-encoding` 呢？这是因为 HTTP 标准制定诞生在 Unicode 标准之前，那时都是使用 Character Set 的形式，而在 Unicode 系列标准出现后，为了保证兼容性 HTTP 标准保留了 `charset` 的使用。\n\n参考:\n\n* [Character set vs. character encoding](http://www.grauw.nl/blog/entry/254)\n* [A brief introduction to code pages and Unicode](https://www.ibm.com/developerworks/library/ws-codepages/ws-codepages-pdf.pdf)\n","slug":"/os/字符集和字符编码","toc":[],"keywords":[],"mtime":1615393171083},"catalog":[{"name":"v8","url":"/post/v8","children":[{"name":"debug-v8-in-vscode","url":"/post/v8/debug-v8-in-vscode.html","children":[]},{"name":"v8 常见数据类型","url":"/post/v8/common-data-types.html","children":[]}]},{"name":"deno","url":"/post/deno","children":[{"name":"deno native plugin 内部实现机制","url":"/post/deno/native-plugin.html","children":[]}]},{"name":"crypto","url":"/post/crypto","children":[{"name":"加密算法调研","url":"/post/crypto/brief-crypto.html","children":[]}]},{"name":"nodejs","url":"/post/nodejs","children":[{"name":"Cluster 模块分析","url":"/post/nodejs/Cluster 模块分析.html","children":[]},{"name":"build-from-source","url":"/post/nodejs/build-from-source.html","children":[]},{"name":"node-addon","url":"/post/nodejs/node-addon.html","children":[]},{"name":"common-snippet","url":"/post/nodejs/common-snippet.html","children":[]},{"name":"v8 Heapsnapshot 文件解析","url":"/post/nodejs/heap-snapshot.html","children":[]},{"name":"Libuv 之 - 只看这篇是不够的","url":"/post/nodejs/libuv.html","children":[]},{"name":"Objects in V8","url":"/post/nodejs/object-in-v8.html","children":[]},{"name":"Libuv 之上的 Node","url":"/post/nodejs/node-on-libuv.html","children":[]}]},{"name":"websocket","url":"/post/websocket","children":[{"name":"WebSocket 协议 1~4 节","url":"/post/websocket/WebSocket 协议 1~4 节.html","children":[]},{"name":"WebSocket 协议 5~10 节","url":"/post/websocket/WebSocket 协议 5~10 节.html","children":[]}]},{"name":"assembly","url":"/post/assembly","children":[{"name":"汇编语言学习小结","url":"/post/assembly/汇编语言学习小结.html","children":[]}]},{"name":"typescript","url":"/post/typescript","children":[{"name":"Decorator in babel and tsc","url":"/post/typescript/decorator.html","children":[]}]},{"name":"rust","url":"/post/rust","children":[{"name":"Lifetime","url":"/post/rust/lifetime.html","children":[]}]},{"name":"oop","url":"/post/oop","children":[{"name":"midway 分析","url":"/post/oop/ioc.html","children":[]}]},{"name":"php","url":"/post/php","children":[{"name":"为什么 PHP 不适合长时间运行","url":"/post/php/为什么 PHP 不适合长时间运行.html","children":[]}]},{"name":"blockchain","url":"/post/blockchain","children":[{"name":"crypto-conditions 简述","url":"/post/blockchain/crypto-conditions 简述.html","children":[]},{"name":"实用拜占庭容错简介","url":"/post/blockchain/实用拜占庭容错简介.html","children":[]}]},{"name":"browser","url":"/post/browser","children":[{"name":"浏览器异步加载和同源策略","url":"/post/browser/浏览器异步加载和同源策略.html","children":[]}]},{"name":"cpp","url":"/post/cpp","children":[{"name":"The as-if rule","url":"/post/cpp/the-as-if-rule.html","children":[]}]},{"name":"work","url":"/post/work","children":[{"name":"Parsing in practice","url":"/post/work/parsing-in-practice.html","children":[]}]},{"name":"os","url":"/post/os","children":[{"name":"大小端序","url":"/post/os/大小端序.html","children":[]},{"name":"UTF-8 编码及检查其完整性","url":"/post/os/UTF-8 编码及检查其完整性.html","children":[]},{"name":"魔数 0x7c00","url":"/post/os/魔数0x7c00.html","children":[]},{"name":"字符集和字符编码","url":"/post/os/字符集和字符编码.html","children":[]}]},{"name":"javascript","url":"/post/javascript","children":[{"name":"Generator Function","url":"/post/javascript/generator function.html","children":[]},{"name":"解析 JSON 的成本","url":"/post/javascript/解析 JSON 的成本.html","children":[]},{"name":"Javascript 内部的字符编码","url":"/post/javascript/Javascript 内部的字符编码.html","children":[]},{"name":"闭包的作用","url":"/post/javascript/闭包的作用.html","children":[]},{"name":"闭包是什么","url":"/post/javascript/闭包是什么.html","children":[]}]},{"name":"static-analysis","url":"/post/static-analysis","children":[{"name":"使用 Rust 重写 ternjs","url":"/post/static-analysis/ternjs.html","children":[]}]},{"name":"craft","url":"/post/craft","children":[{"name":"制作一个属于自己的语言","url":"/post/craft/create_your_own_lang.html","children":[]}]}],"title":"The hard ways"}}