{"code":200,"data":{"post":{"filename":"build-from-source","rawMeta":{"title":"从源码构建 node.js"},"content":"# 从源码构建 node.js\n\n## 前言\n\n本文将介绍如何从源码构建 node.js\n\n## 克隆仓库\n\n首先是将 [node](https://github.com/nodejs/node) 源码克隆到本地，然后按照当前的学习进度，选择 `v14.x` 分支\n\n## 准备构建环境\n\n为了避免麻烦，构建优先选择 `*nix` 环境，这样大部分情况下，环境应该是默认可用的，比如 Ubuntu 上已经安装了 `build-essential`（apt install build-essential），和 macos 上已经安装了 Xcode\n\n如果这部分没有准备好，或者遇到问题，可以参考 [building-nodejs-on-supported-platforms](https://github.com/nodejs/node/blob/master/BUILDING.md#building-nodejs-on-supported-platforms)\n\n## 配置缓存\n\n因为是以学习源码的目的来从源码编译，所以后续一定会有频繁编译的情况，那么就需要先配置 `ccache` 来为后续的编译开启缓存，在没有缓存的情况下，通常一次编译**至少需要 30 分钟**的时间\n\n如果是 macos 上，通过 `brew install ccache` 来安装 `ccache`\n\n安装好之后，在 `~/.bash_profile` 文件中加入下面的配置，如果使用的 zsh 则是 `~/zshrc`：\n\n```bash\nmkdir /var/tmp/ccache 2>/dev/null\nccache -o cache_dir=/var/tmp/ccache\n\n# 大小根据当前可用磁盘空间酌情而定\nccache -o max_size=30.0G\n\n# 对于 Linux 系统，使用下面的设定\nexport CC=\"ccache gcc\"\nexport CXX=\"ccache g++\"\n\n# 官方没有说明的是，对于 macos，需要使用下面的设定\nexport CC=\"ccache cc\"\nexport CXX=\"ccache c++\"\n```\n\n## 编译源码\n\n在源码根目录下面运行下面的命令：\n\n```bash\n# 注意根据自身硬件和系统条件设置并行构建任务数，下面命令使用 `-j16` 表示运行 16 个并行构建任务\n./configure --debug && make -j16\n```\n\n更多环节可以参考 [Building Node.js](https://github.com/nodejs/node/blob/master/BUILDING.md#building-nodejs-on-supported-platforms)\n","slug":"/nodejs/build-from-source","toc":[{"name":"前言","depth":2,"anchor":"#前言","children":[]},{"name":"克隆仓库","depth":2,"anchor":"#克隆仓库","children":[]},{"name":"准备构建环境","depth":2,"anchor":"#准备构建环境","children":[]},{"name":"配置缓存","depth":2,"anchor":"#配置缓存","children":[]},{"name":"编译源码","depth":2,"anchor":"#编译源码","children":[]}],"keywords":[],"mtime":1666193883773},"catalog":[{"name":"v8","url":"/post/v8","children":[{"name":"在 VSCode 中调试 v8 源码","url":"/post/v8/debug-v8-in-vscode.html","children":[]},{"name":"v8 常见数据类型","url":"/post/v8/common-data-types.html","children":[]}]},{"name":"deno","url":"/post/deno","children":[{"name":"deno native plugin 内部实现机制","url":"/post/deno/native-plugin.html","children":[]}]},{"name":"crypto","url":"/post/crypto","children":[{"name":"加密算法调研","url":"/post/crypto/brief-crypto.html","children":[]}]},{"name":"nodejs","url":"/post/nodejs","children":[{"name":"Cluster 模块分析","url":"/post/nodejs/Cluster 模块分析.html","children":[]},{"name":"从源码构建 node.js","url":"/post/nodejs/build-from-source.html","children":[]},{"name":"Node.js 扩展","url":"/post/nodejs/node-addon.html","children":[]},{"name":"Node 源码中的常见代码","url":"/post/nodejs/common-snippet.html","children":[]},{"name":"v8 Heapsnapshot 文件解析","url":"/post/nodejs/heap-snapshot.html","children":[]},{"name":"Libuv 之 - 只看这篇是不够的","url":"/post/nodejs/libuv.html","children":[]},{"name":"Objects in V8","url":"/post/nodejs/object-in-v8.html","children":[]},{"name":"Libuv 之上的 Node","url":"/post/nodejs/node-on-libuv.html","children":[]}]},{"name":"websocket","url":"/post/websocket","children":[{"name":"WebSocket 协议 1~4 节","url":"/post/websocket/WebSocket 协议 1~4 节.html","children":[]},{"name":"WebSocket 协议 5~10 节","url":"/post/websocket/WebSocket 协议 5~10 节.html","children":[]}]},{"name":"assembly","url":"/post/assembly","children":[{"name":"汇编语言学习小结","url":"/post/assembly/汇编语言学习小结.html","children":[]}]},{"name":"typescript","url":"/post/typescript","children":[{"name":"Decorator in babel and tsc","url":"/post/typescript/decorator.html","children":[]}]},{"name":"rust","url":"/post/rust","children":[{"name":"Lifetime","url":"/post/rust/lifetime.html","children":[]}]},{"name":"oop","url":"/post/oop","children":[{"name":"Midway 分析","url":"/post/oop/ioc.html","children":[]}]},{"name":"php","url":"/post/php","children":[{"name":"为什么 PHP 不适合长时间运行","url":"/post/php/为什么 PHP 不适合长时间运行.html","children":[]}]},{"name":"blockchain","url":"/post/blockchain","children":[{"name":"Crypto-conditions 简述","url":"/post/blockchain/crypto-conditions 简述.html","children":[]},{"name":"实用拜占庭容错简介","url":"/post/blockchain/实用拜占庭容错简介.html","children":[]}]},{"name":"browser","url":"/post/browser","children":[{"name":"浏览器异步加载和同源策略","url":"/post/browser/浏览器异步加载和同源策略.html","children":[]}]},{"name":"cpp","url":"/post/cpp","children":[{"name":"The as-if rule","url":"/post/cpp/the-as-if-rule.html","children":[]}]},{"name":"work","url":"/post/work","children":[{"name":"Parsing in practice","url":"/post/work/parsing-in-practice.html","children":[]}]},{"name":"os","url":"/post/os","children":[{"name":"大小端序","url":"/post/os/大小端序.html","children":[]},{"name":"UTF-8 编码及检查其完整性","url":"/post/os/UTF-8 编码及检查其完整性.html","children":[]},{"name":"魔数 0x7c00","url":"/post/os/魔数0x7c00.html","children":[]},{"name":"字符集和字符编码","url":"/post/os/字符集和字符编码.html","children":[]}]},{"name":"javascript","url":"/post/javascript","children":[{"name":"Generator Function","url":"/post/javascript/generator function.html","children":[]},{"name":"解析 JSON 的成本","url":"/post/javascript/解析 JSON 的成本.html","children":[]},{"name":"Javascript 内部的字符编码","url":"/post/javascript/Javascript 内部的字符编码.html","children":[]},{"name":"闭包的作用","url":"/post/javascript/闭包的作用.html","children":[]},{"name":"闭包是什么","url":"/post/javascript/闭包是什么.html","children":[]}]},{"name":"static-analysis","url":"/post/static-analysis","children":[{"name":"使用 Rust 重写 ternjs","url":"/post/static-analysis/ternjs.html","children":[]}]},{"name":"craft","url":"/post/craft","children":[{"name":"制作一个属于自己的语言","url":"/post/craft/create_your_own_lang.html","children":[]}]},{"name":"go","url":"/post/go","children":[{"name":"Go 语言中的 Generic 设计缺陷","url":"/post/go/bad_in_generic_syntax.html","children":[]}]},{"name":"scratch","url":"/post/scratch","children":[{"name":"初唐四杰","url":"/post/scratch/初唐四杰.html","children":[]},{"name":"最好的博客工具","url":"/post/scratch/最好的博客工具.html","children":[]}]}],"title":"The hard ways"}}