{"code":200,"data":{"post":{"filename":"common-snippet","rawMeta":{"title":"common-snippet"},"content":"## 前言\n\nnode 源码中有一些常见的，有趣的代码片段，文本将对这些内容进行解释、记录。了解这些既可以拓展无用的知识点，又可以方便后续阅读源码。\n\n### V8_LIKELY & V8_UNLIKELY\n\n`V8_LIKELY & V8_UNLIKELY` 在源码中很常见，比如下面代码片段：\n\n```cpp\ntemplate <class T>\nLocal<T> MaybeLocal<T>::ToLocalChecked() {\n  if (V8_UNLIKELY(val_ == nullptr)) V8::ToLocalEmpty();\n  return Local<T>(val_);\n}\n```\n\n它们的定义是：\n\n```cpp\n#if V8_HAS_BUILTIN_EXPECT\n# define V8_UNLIKELY(condition) (__builtin_expect(!!(condition), 0))\n# define V8_LIKELY(condition) (__builtin_expect(!!(condition), 1))\n#else\n# define V8_UNLIKELY(condition) (condition)\n# define V8_LIKELY(condition) (condition)\n#endif\n```\n\n所以核心其实是 `__builtin_expect`，它是 GCC 编译器 [内置的函数](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html#index-_005f_005fbuiltin_005fexpect)\n\n它的作用是，比如有下面代码：\n\n```cpp\nif (__builtin_expect(x, 0)) {\n    foo();\n    ...\n} else {\n    bar();\n    ...\n}\n```\n\n生成的汇编代码可能大致是：\n\n```asm\n  cmp   $x, 0\n  jne   _foo\n_bar:\n  call  bar\n  ...\n  jmp   after_if\n_foo:\n  call  foo\n  ...\nafter_if:\n```\n\n> 例子取自：[What is the advantage of GCC's __builtin_expect in if else statements?](https://stackoverflow.com/questions/7346929/what-is-the-advantage-of-gccs-builtin-expect-in-if-else-statements)\n\nCPU 加载指令的时候，并不是一条一条加载的，为了性能会一次预读一定数量的指令，这样当加载第一条 `cmp   $x, 0` 指令的时候，`_bar` 的指令就也一并被加载了。我们注意到，其实在源码中，`bar` 是在 `foo` 后面的，之所以有这样的输出，就是我们通过 `__builtin_expect(x, 0)` 告诉编译器，这个条件判断在实际业务执行中，大概率会是 `false`，因此可以将 `else` 部分的指令放前置，可以加速 CPU 的执行\n\n更多拓展可以参考：\n\n- [CPU branch predictor](http://en.wikipedia.org/wiki/Branch_predictor)\n- [How much do __builtin_expect(), likely(), and unlikely() improve performance?](http://blog.man7.org/2012/10/how-much-do-builtinexpect-likely-and.html)\n- [C++ attribute: likely, unlikely](https://en.cppreference.com/w/cpp/language/attributes/likely)\n","slug":"/nodejs/common-snippet","toc":[{"name":"前言","depth":2,"anchor":"#前言","children":[{"name":"V8_LIKELY & V8_UNLIKELY","depth":3,"anchor":"#V8_LIKELY&V8_UNLIKELY","children":[]}]}],"keywords":[],"mtime":1615393171071},"catalog":[{"name":"v8","url":"/post/v8","children":[{"name":"debug-v8-in-vscode","url":"/post/v8/debug-v8-in-vscode.html","children":[]},{"name":"v8 常见数据类型","url":"/post/v8/common-data-types.html","children":[]}]},{"name":"deno","url":"/post/deno","children":[{"name":"deno native plugin 内部实现机制","url":"/post/deno/native-plugin.html","children":[]}]},{"name":"crypto","url":"/post/crypto","children":[{"name":"加密算法调研","url":"/post/crypto/brief-crypto.html","children":[]}]},{"name":"nodejs","url":"/post/nodejs","children":[{"name":"Cluster 模块分析","url":"/post/nodejs/Cluster 模块分析.html","children":[]},{"name":"build-from-source","url":"/post/nodejs/build-from-source.html","children":[]},{"name":"node-addon","url":"/post/nodejs/node-addon.html","children":[]},{"name":"common-snippet","url":"/post/nodejs/common-snippet.html","children":[]},{"name":"v8 Heapsnapshot 文件解析","url":"/post/nodejs/heap-snapshot.html","children":[]},{"name":"Libuv 之 - 只看这篇是不够的","url":"/post/nodejs/libuv.html","children":[]},{"name":"object-in-v8","url":"/post/nodejs/object-in-v8.html","children":[]}]},{"name":"websocket","url":"/post/websocket","children":[{"name":"WebSocket 协议 1~4 节","url":"/post/websocket/WebSocket 协议 1~4 节.html","children":[]},{"name":"WebSocket 协议 5~10 节","url":"/post/websocket/WebSocket 协议 5~10 节.html","children":[]}]},{"name":"assembly","url":"/post/assembly","children":[{"name":"汇编语言学习小结","url":"/post/assembly/汇编语言学习小结.html","children":[]}]},{"name":"typescript","url":"/post/typescript","children":[{"name":"Decorator in babel and tsc","url":"/post/typescript/decorator.html","children":[]}]},{"name":"rust","url":"/post/rust","children":[{"name":"Lifetime","url":"/post/rust/lifetime.html","children":[]}]},{"name":"oop","url":"/post/oop","children":[{"name":"midway 分析","url":"/post/oop/ioc.html","children":[]}]},{"name":"php","url":"/post/php","children":[{"name":"为什么 PHP 不适合长时间运行","url":"/post/php/为什么 PHP 不适合长时间运行.html","children":[]}]},{"name":"blockchain","url":"/post/blockchain","children":[{"name":"crypto-conditions 简述","url":"/post/blockchain/crypto-conditions 简述.html","children":[]},{"name":"实用拜占庭容错简介","url":"/post/blockchain/实用拜占庭容错简介.html","children":[]}]},{"name":"browser","url":"/post/browser","children":[{"name":"浏览器异步加载和同源策略","url":"/post/browser/浏览器异步加载和同源策略.html","children":[]}]},{"name":"cpp","url":"/post/cpp","children":[{"name":"The as-if rule","url":"/post/cpp/the-as-if-rule.html","children":[]}]},{"name":"work","url":"/post/work","children":[{"name":"Parsing in practice","url":"/post/work/parsing-in-practice.html","children":[]}]},{"name":"os","url":"/post/os","children":[{"name":"大小端序","url":"/post/os/大小端序.html","children":[]},{"name":"UTF-8 编码及检查其完整性","url":"/post/os/UTF-8 编码及检查其完整性.html","children":[]},{"name":"魔数 0x7c00","url":"/post/os/魔数0x7c00.html","children":[]},{"name":"字符集和字符编码","url":"/post/os/字符集和字符编码.html","children":[]}]},{"name":"javascript","url":"/post/javascript","children":[{"name":"Generator Function","url":"/post/javascript/generator function.html","children":[]},{"name":"解析 JSON 的成本","url":"/post/javascript/解析 JSON 的成本.html","children":[]},{"name":"Javascript 内部的字符编码","url":"/post/javascript/Javascript 内部的字符编码.html","children":[]},{"name":"闭包的作用","url":"/post/javascript/闭包的作用.html","children":[]},{"name":"闭包是什么","url":"/post/javascript/闭包是什么.html","children":[]}]},{"name":"static-analysis","url":"/post/static-analysis","children":[{"name":"使用 Rust 重写 ternjs","url":"/post/static-analysis/ternjs.html","children":[]}]},{"name":"react","url":"/post/react","children":[{"name":"build-from-source","url":"/post/react/build-from-source.html","children":[]},{"name":"bootstrap","url":"/post/react/bootstrap.html","children":[]}]}],"title":"The hard ways"}}