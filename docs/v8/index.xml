<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>V8s on hsiaosiyuan</title>
    <link>http://hsiaosiyuan0.github.io/v8/</link>
    <description>Recent content in V8s on hsiaosiyuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Aug 2020 00:00:00 +0800</lastBuildDate><atom:link href="http://hsiaosiyuan0.github.io/v8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>V8 调试</title>
      <link>http://hsiaosiyuan0.github.io/v8/debug-v8-in-vscode/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>http://hsiaosiyuan0.github.io/v8/debug-v8-in-vscode/</guid>
      <description>背景 背景有2：
  虽然目前存在各式的 JavaScript 引擎，但是由于其优异的性能表现 V8 已经成为相对的标准。
在深入学习 JavaScript 语言的过程中，除了需要对 语言标准 进行了解掌握，引擎作为对语言标准的实现，了解学习引擎内部的执行机理则是另一个更为立体的学习语言的方式。
学习引擎内部机理，直接阅读源码的方式显得过于抽象，如果可以将引擎构建运行起来，并且可以对其进行断点调试，会使学习的过程变得生动有趣。
  在 node-debugger 中基于我对 debugger 的理解画了一个通用形式的构架图，希望可以将图中的内容对应到 v8 的实现细节中
  接下来内容，就是对如何在 VSCode 中对 V8 引擎进行断点调试的过程的记录。
获取源码 可以参照 V8 官网中的章节 Building V8 from source 来获取并从源码构建 V8。V8 作为 Chromium 项目的一部分，其构建方式都是沿用的与 Chromium 相同的。
按照官网记录的步骤，需要先配置构建工具 depot_tools 并利用 gclient sync 来同步项目的依赖，如果不是为了向 V8 贡献源码、只是以学习为目的的话，整个构建的过程显得相对繁琐，并且构建出的内容在 Windows 和 MacOS 下进行断点调试有存在问题。
为了方便代码的获取和调试，我在 v8-cmake 项目的基础上加入了 VSCode 容器调试相关的配置，称之为了 v8-cmake-vscode。
v8-cmake-vscode 包含两个部分的内容：
  针对 V8 的 CMake 配置。V8 默认的构建配置对主流的编辑器比如 VSCode 或者 CLion 没有比较好的支持</description>
    </item>
    
  </channel>
</rss>
